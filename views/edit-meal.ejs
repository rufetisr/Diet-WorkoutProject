<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Diet and Workout - Meal Form</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    /* Add some basic styling for the message box */
    #message-box {
      position: fixed;
      bottom: 1rem;
      right: 1rem;
      padding: 1rem;
      border-radius: 0.5rem;
      color: white;
      display: none; /* Hidden by default */
      z-index: 1000;
    }
    .success {
      background-color: #48bb78; /* Tailwind green-500 */
    }
    .error {
      background-color: #f56565; /* Tailwind red-500 */
    }
  </style>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center">

  <form id="mealForm" action="<%= edit_meal_url %>" method="post" class="bg-white p-8 rounded-lg shadow-md w-full max-w-sm">
    <h2 class="text-2xl font-bold mb-6 text-gray-800">Edit Meal</h2>
    <div class="mb-4">
      <label for="meal-name" class="block text-gray-700 text-sm font-bold mb-2">Meal Name:</label>
      <input value="<%= meal['name'] %>" type="text" name="name" id="meal-name" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500">
    </div>
    <div class="mb-6">
      <label for="calories" class="block text-gray-700 text-sm font-bold mb-2">Calories:</label>
      <input value="<%= meal['calories'] %>" type="number" name="calories" id="calories" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-500">
    </div>
    <div class="flex items-center justify-between">
      <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
        Update Meal
      </button>
    </div>
  </form>

  <div id="message-box" class=""></div>

  <script>
    // Get the form element (updated ID)
    const mealForm = document.getElementById('mealForm');
    // Get the message box element
    const messageBox = document.getElementById('message-box');

    // Add an event listener for the form submission
    mealForm.addEventListener('submit', async function(event) {
      // Prevent the default form submission
      event.preventDefault();

      // Get the form action URL
      const url = this.action;
      // Get the form data
      const formData = new FormData(this);

      // Convert form data to a plain object (suitable for JSON body)
      const data = {};
      formData.forEach((value, key) => {
        data[key] = value;
      });

      try {
        // Send the PUT request using fetch
        const response = await fetch(url, {
          method: 'PUT', // Specify the PUT method
          headers: {
            'Content-Type': 'application/json' // Indicate that the body is JSON
            // You might need other headers like Authorization depending on your backend
          },
          body: JSON.stringify(data) // Send the data as a JSON string
        });

        // Check if the request was successful
        if (response.ok) {
          const result = await response.json(); // Assuming the backend returns JSON
          console.log('Meal updated successfully:', result);
          showMessage('Meal updated successfully!', 'success');
          // You can redirect the user or perform other actions here
          // window.location.href = '/meals'; // Example redirect
        } else {
          // Handle errors
          const error = await response.text(); // Or response.json() if backend sends JSON errors
          console.error('Failed to update meal:', response.status, error);
          showMessage(`Failed to update meal: ${response.status}`, 'error');
        }
      } catch (error) {
        // Handle network errors or other exceptions
        console.error('An error occurred:', error);
        showMessage('An error occurred while updating.', 'error');
      }
    });

    // Function to display messages
    function showMessage(message, type) {
      messageBox.textContent = message;
      messageBox.className = ''; // Reset classes
      messageBox.classList.add(type);
      messageBox.style.display = 'block';

      // Hide the message after 3 seconds
      setTimeout(() => {
        messageBox.style.display = 'none';
      }, 3000);
    }
  </script>

</body>
</html>
